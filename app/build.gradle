apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'
apply plugin: 'com.google.firebase.firebase-perf'
// To use it : ./gradlew dependencyUpdates -Drevision=release
apply plugin: 'com.github.ben-manes.versions'

apply plugin: 'io.fabric'

//Check dependencies to update --> ./gradlew dependencyUpdates

ext {
    majorVersion = "0"
    minorVersion = "17"
    patchVersion = "2"
}

// Load keystore
// http://stackoverflow.com/questions/20562189/sign-apk-without-putting-keystore-info-in-build-gradle
def keystorePropertiesFile = rootProject.file("keystore.properties");
def keystoreProperties = new Properties()
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {

    compileSdkVersion 25
    buildToolsVersion "25.0.3"
    defaultConfig {
        applicationId "biz.eventually.atpl"
        minSdkVersion 16
        targetSdkVersion 25

        versionCode(getDate() as Integer)
        versionName "${majorVersion}.${minorVersion}.${patchVersion} build ${versionCode}"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        vectorDrawables.useSupportLibrary = true

        buildConfigField 'String', 'VERSION_APP', "\"${majorVersion}.${minorVersion}.${patchVersion}\""

        multiDexEnabled = true
    }

    signingConfigs {
        release {
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
        }
    }

    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix '-dev'

            debuggable true
            minifyEnabled false

            buildConfigField 'String', 'API_ATPL_ENDPOINT', "\"http://www.etchebiscaye.com/api/\""
            buildConfigField 'String', 'API_ATPL_ENDPOINT_MOCK', "\"http://${getIP()}/~laminr/atpl/webapp/web/api/\""
            buildConfigField 'String', 'API_ATPL_IMG', "\"http://www.etchebiscaye.com/img/questions/\""
        }
        release {

            buildConfigField 'String', 'API_ATPL_ENDPOINT', "\"https://www.aeroknow.xyz/api/\""
            buildConfigField 'String', 'API_ATPL_IMG', "\"https://www.aeroknow.xyz/img/questions/\""

            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            proguardFiles fileTree(dir: 'proguard/', include: ['*.pro']).asList().toArray()

            debuggable false
            minifyEnabled true
            shrinkResources true

            zipAlignEnabled true
            applicationIdSuffix '.release'
            versionNameSuffix '-beta'

            signingConfig signingConfigs.release
        }
    }
    sourceSets {
        main.java.srcDirs += 'src/source/kotlin'
    }
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }
    lintOptions {
        disable 'InvalidPackage'
    }
}

//kapt {
//    generateStubs = true
//}

ext {
    supportVersion = '25.4.0'
    leakCanary = '1.5'
    retrofitVersion = '2.2.0'
    butterknifeVersion = '8.5.1'
    okhttpVersion = '3.6.0'
    daggerVersion = '2.11'
    firebaseVersion = '11.2.0'
    anko_version = '0.10.1'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })

    compile "com.android.support:appcompat-v7:$supportVersion"
    compile "com.android.support:design:$supportVersion"
    compile "com.android.support:cardview-v7:$supportVersion"
    compile "com.android.support:recyclerview-v7:$supportVersion"

    compile "com.android.support:support-v4:$supportVersion"
    compile "com.android.support:support-vector-drawable:$supportVersion"

    compile 'com.android.support:multidex:1.0.1'

//    compile "com.jakewharton:butterknife:$butterknifeVersion"
    compile "com.squareup.retrofit2:retrofit:$retrofitVersion"
    compile "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"
    compile "com.squareup.retrofit2:converter-moshi:$retrofitVersion"

    compile "org.jetbrains.anko:anko-commons:$anko_version"

    // Sweat Alert
    compile 'cn.pedant.sweetalert:library:1.3'

    // Alerter
    compile 'com.tapadoo.android:alerter:1.0.8'

    // Swipe
    compile 'com.github.pwittchen:swipe:0.1.0'

    //RxJava dependencies
    compile 'io.reactivex.rxjava2:rxandroid:2.0.1'
    compile 'io.reactivex.rxjava2:rxjava:2.1.0'
    compile 'org.reactivestreams:reactive-streams:1.0.0'
    compile 'io.reactivex.rxjava2:rxkotlin:2.0.0'
    compile 'com.squareup.moshi:moshi:1.4.0'
    compile 'com.squareup.picasso:picasso:2.5.2'

    compile "com.squareup.okhttp3:okhttp:$okhttpVersion"
    compile "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"

    // REALM Extension
    compile 'com.github.vicpinm:krealmextensions:1.1.5'
    compile 'com.github.vicpinm:krealmextensions-rxjava:1.1.5'

    // LOADER
    compile 'com.victor:lib:1.0.4'

    // Menu
    compile 'com.github.Yalantis:GuillotineMenu-Android:1.2'

    // DAGGER
    compile "com.google.dagger:dagger:$daggerVersion"
    kapt "com.google.dagger:dagger-compiler:$daggerVersion"

    provided 'org.glassfish:javax.annotation:10.0-b28'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    
    // KOTLIN
    compile "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"

    // Fabric crashlytics
    compile('com.crashlytics.sdk.android:crashlytics:2.6.8@aar') {
        transitive = true
    }

    testCompile 'junit:junit:4.12'
    debugCompile "com.squareup.leakcanary:leakcanary-android:$leakCanary"
    releaseCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanary"
    testCompile "com.squareup.leakcanary:leakcanary-android-no-op:$leakCanary"

    compile "com.google.firebase:firebase-core:$firebaseVersion"
    compile "com.google.firebase:firebase-perf:$firebaseVersion"
}

// should be at the bottom
apply plugin: 'com.google.gms.google-services'

def getIP() {
    InetAddress result = null;
    Enumeration<NetworkInterface> interfaces = NetworkInterface.getNetworkInterfaces();
    while (interfaces.hasMoreElements()) {
        Enumeration<InetAddress> addresses = interfaces.nextElement().getInetAddresses();
        while (addresses.hasMoreElements()) {
            InetAddress address = addresses.nextElement();
            if (!address.isLoopbackAddress()) {
                if (address.isSiteLocalAddress()) {
                    return address.getHostAddress();
                } else if (result == null) {
                    result = address;
                }
            }
        }
    }
    return (result != null ? result : InetAddress.getLocalHost()).getHostAddress();
}


def getDate() {
    def date = new Date()
    def formattedDate = date.format('yyMMddHH')
    return formattedDate.toLong()
}